module pybase

source py from "core.py"
 ( "mlc_id" as id
 , "mlc_map" as map
 , "mlc_map" as zipWith
 , "mlc_fold" as fold
 , "mlc_enumerateWith" as enumerateWith
 , "mlc_add" as add
 , "mlc_sub" as sub
 , "mlc_mul" as mul
 , "mlc_div" as div
 )

export id
export map
export zipWith
export fold
export enumerateWith
export add
export sub
export mul
export div

type py Num = "float"

id    :: a -> a
id py :: a -> a

map    :: (a -> b) -> [a] -> [b]
map py :: (a -> b) -> [a] -> [b]

zipWith    :: (a -> b -> c) -> [a] -> [b] -> [c]
zipWith py :: (a -> b -> c) -> [a] -> [b] -> [c]

fold    :: (b -> a -> b) -> b -> [a] -> b
fold py :: (b -> a -> b) -> b -> [a] -> b

enumerateWith    :: (a -> Int -> b) -> [a] -> [b]
enumerateWith py :: (a -> int -> b) -> [a] -> [b]

add    :: Num -> Num -> Num
add py :: Num -> Num -> Num

sub    :: Num -> Num -> Num
sub py :: Num -> Num -> Num

mul    :: Num -> Num -> Num
mul py :: Num -> Num -> Num

div    :: Num ->  Num -> Num
div py :: Num ->  Num -> Num


-------------------------------------------------------------------------------
--                 Pack and Unpack internal functions                          
-- These functions are used by morloc internally for (de)serialization of types
-- that cannot be automatically (de)serialized into/from JSON. They should not
-- be exported.
-------------------------------------------------------------------------------

source py from "data.py"
 ( "morloc_packMap" as packMap
 , "morloc_unpackMap" as unpackMap
 )

export Map

type py (Map key val) = "dict" key val

-- These do not need to be exported (and indeed should not be)
packMap :: pack => ([key],[val]) -> Map key val
packMap py :: pack => ([key],[val]) -> "dict" key val

unpackMap :: unpack => Map key val -> ([key],[val])
unpackMap py :: unpack => "dict" key val -> ([key],[val])
